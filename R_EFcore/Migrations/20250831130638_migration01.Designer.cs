// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using R_EFcore.Data.Models;

#nullable disable

namespace R_EFcore.Migrations
{
    [DbContext(typeof(CompanyDbContext))]
    [Migration("20250831130638_migration01")]
    partial class migration01
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("R_EFcore.Data.Models.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("R_EFcore.Data.Models.Employee", b =>
                {
                    b.Property<int>("EmpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmpId"), 1L, 2);

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Salary")
                        .HasColumnType("float");

                    b.Property<int>("fkemployeeDepartmentDeptId")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar")
                        .HasColumnName("EmployeeName");

                    b.HasKey("EmpId");

                    b.HasIndex("fkemployeeDepartmentDeptId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("R_EFcore.Data.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.HasKey("ProductId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("R_EFcore.Data.Models.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.HasKey("Id");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("R_EFcore.Data.Models.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("R_EFcore.Data.Models.StudentCourse", b =>
                {
                    b.Property<int>("CrsId")
                        .HasColumnType("int");

                    b.Property<int>("StudId")
                        .HasColumnType("int");

                    b.HasKey("CrsId", "StudId");

                    b.HasIndex("StudId");

                    b.ToTable("studentCourses");
                });

            modelBuilder.Entity("R_EFcore.Department", b =>
                {
                    b.Property<int>("DeptId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DeptId"), 10L, 10);

                    b.Property<int>("DepartmentManagerId")
                        .HasColumnType("int");

                    b.Property<string>("DeptName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar")
                        .HasColumnName("department name");

                    b.Property<DateOnly>("dateOfCreation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("GETDATE()");

                    b.HasKey("DeptId");

                    b.HasIndex("DepartmentManagerId")
                        .IsUnique();

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("R_EFcore.Data.Models.Employee", b =>
                {
                    b.HasOne("R_EFcore.Department", "employeeDepartment")
                        .WithMany("employees")
                        .HasForeignKey("fkemployeeDepartmentDeptId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("employeeDepartment");
                });

            modelBuilder.Entity("R_EFcore.Data.Models.StudentCourse", b =>
                {
                    b.HasOne("R_EFcore.Data.Models.Course", "Course")
                        .WithMany("StudentCourses")
                        .HasForeignKey("CrsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("R_EFcore.Data.Models.Student", "Student")
                        .WithMany("StudentCourses")
                        .HasForeignKey("StudId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("R_EFcore.Department", b =>
                {
                    b.HasOne("R_EFcore.Data.Models.Employee", "manager")
                        .WithOne("managerDepartment")
                        .HasForeignKey("R_EFcore.Department", "DepartmentManagerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("manager");
                });

            modelBuilder.Entity("R_EFcore.Data.Models.Course", b =>
                {
                    b.Navigation("StudentCourses");
                });

            modelBuilder.Entity("R_EFcore.Data.Models.Employee", b =>
                {
                    b.Navigation("managerDepartment");
                });

            modelBuilder.Entity("R_EFcore.Data.Models.Student", b =>
                {
                    b.Navigation("StudentCourses");
                });

            modelBuilder.Entity("R_EFcore.Department", b =>
                {
                    b.Navigation("employees");
                });
#pragma warning restore 612, 618
        }
    }
}
